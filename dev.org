* Current
** TODO Create another scene with a different baddie
   The lowest level slime
   This implies a restructure of the scene manager.
   Will need to be able to set up a progression from one fight to the next
* Backlog
** TODO Damage numbers fly off when receive damage
** TODO Tutorial section                                               :epic:
*** TODO Training dummy stage 1
**** TODO Create a new scene
**** TODO create training dummy npc
**** TODO Player just gets a single skill here (light attack)
**** TODO Scene transition to training dummy 2
**** TODO Identify similarities between proto battle and dummy battle
**** TODO Factor out what can into a common ancestor or generator/factory
**** TODO create new scene
**** TODO create training dummy npc
**** TODO new training dummy npc has no skills and just takes damage
**** TODO Battle ends when the dummy is defeated
*** TODO Training dummy stage 2
**** TODO Player should have 0 skills in this battle
**** TODO training dummy has one simple skill that does 0 damage to player
**** TODO scene ends after 5 or so text fragments are defended
*** TODO Training dummy stage 3
    Player has a single skill and monster gets a skill, this round teaches the 
    player to balance attack and defense.
*** TODO Training tutorial wizard
**** TODO Battle pauses and a tooltip appears prompting the player what to do.
     For the first stage, it shows the player that they're in the offensive 
     stance. Then shows the player that they can type the skills shown at the 
     bottom.  At each step, the player presses a button to continue the tutorial
** TODO When player defends, the text fragment should pop or explode
** TODO Display flash + particles on hit of either character
** TODO More tweaking of TextLibrary
   Seems like sometimes even a light attack is like a whole sentence
   This should never happen, it should always be just a few letters
** TODO Create battle over scene or transition
** TODO Move all data into a single data store
   Components no longer hold any data
   They hold references to data trees within the data store
   They do however, initialize their own trees in the data store
** TODO Damage counters (numbers flying off hits) Show damage numbers above enemy when they take damage
** TODO Combo system
   Will need to play around with this to see if it's fun.
   Basically, you'll need to chain up weaker attacks to hit the harder ones.
   So, you can't type medium slash without first typing light slash perfectly
   And so on up to hard and upper (might add more when I add more sprites
** TODO Death event
*** TODO Player does a death animation
*** TODO All the flying text fragments spin and fly away
*** TODO Enemy npc does some kind of victory dance
*** TODO fade screen
*** TODO Show "You Died" like from dark souls or something
** TODO Effect execution needs to be made into a utility :refactor:
   It's being used in a couple places currently and needs DRYing
** TODO Display incorrect characters count typed along with correct characters.
   This needs some sort of design such that it's intuitive as to what's 
   happening. I'm thinking 2 counters, 1 red 1 green or something equally 
   opposing. One counting correct and one incorrect characters.

   Revisiting this, there doesn't need to be a count, just needs to have a 
   color perhaps. Basically, once a typo happens, the text fragment gets tainted
   so that it has half effectiveness. The color of the text fragment while it's
   being typed should reflect this.
** TODO Make the battle over scene overlay on top of the battle scene.
** TODO Get a different sprite for the training dummy(s)
** TODO Do some balance work on TextLibrary
   A better way to generate text for fragments.  Find words within the min-max,
   then add words of random size until the max is exceeded then back out by 1 
   word.

   This works better when the library is all just single words.  Will need a bit
   of playtesting to see which of these is preferable.
*** DONE First add a real text
    CLOSED: [2017-03-26 Sun 04:59]
** TODO Resolve if multiple skills are completed simultaneously
   This is something that needs playtesting.
   From a top level design consideration, this seems like a bug: there should 
   never be two skills with the same text to type.
   However, when actually doing it, it seems like it might become a happy 
   accident.  It should be rare enough that it doesn't become game breaking
   and yet when it does happen, it could provide a nice RNG boost to the player
   where you're like "YES! got lucky!"
   In the case I decide to keep/run with it, then I need to handle both skills
   executing in sequence.
** TODO Ensure spaces are clear when typing
   Especially when the text fragment breaks lines
** TODO Make component file names match component names            :refactor: 
** TODO Create a better security system for the admin basic auth
** TODO Setup DNS to actual domain
** TODO Link on Sproutpost
** TODO Replace background entity with Crafty.background()
   On second thought, there might have been a good reason why I used an entity
   instead.  might have to do with scaling and offset of 
   This task should instead revolve around streamlining the background
   rendering.  Right now, the background has an x and y offset and then the 
   viewport also has an x and y offset in addition to a scale factor.  Can I 
   do away with having to have them both?
** TODO Boss fights
   Example: first fight after the training dummy is slime
   Slime fight 1 it just throws the simple straight attack
   Slime fight 2 it does the physics attack in an arc
   Slime fight 3 BOSS: it does both
   Palette switch for fight 3 so you know that this guy is tougher.
   Moving forward, the following opponents will receive the same treatment.
   Each next enemy is a new sprite with a new set of skills (and challenges) 
   Initially design/build the ultimate form of the monster/opponent with all 
   their skills and abilities.  Then this opponent will be preceded by a few
   weaker versions of the same creature, each one introducing another skill or
   mechanic, all leading up to the boss fight
   Might be good to introduce a new player skill after each boss fight as well
   so there's a feeling of progression
** TODO Iron man mode
   You get a fixed amount of health and the goal is to progress as far as possible
   monsters come in a constant stream so the scene doesn't transition
** TODO Generate vocabularies from markov chains of some source material(s)
** TODO Adding a rotation to the words in a physics attack makes for an interesting challenge
* Roadmap
** TODO character sprite changes stance when stance changes
** TODO System for recording text fragment completion data
** TODO Research use of web workers
** TODO Player and NPC models to be proper STI subclasses of Character :refactor:
** TODO Make a has and belongs to many between Character and Text
** TODO Send typing data to the server
   Server should be able to calculate average WPM and error rate
** TODO Text fragments are truncated until typed. :ui/ux:
Show the first ~10 characters so the player can get their fingers in motion but
only show the rest once it's the active fragment.  This will keep the screen
from getting as crowded
** TODO Play a different sound when a typo happens
** TODO BUG: double quote also triggers single quote when typing
** TODO Enable double quote
** TODO Change declarations of audio assets to use proper rails asset references
Instead of /assets/blah.wav, audio/blah.wav
** TODO Play slash sound on attack
** TODO Play smack sound on npc hit
** TODO Play smack sound on player hit
** TODO Tighten hitboxes (both of entities and of text fragments)
** TODO Add another attack to the monster
Make a position func that handles an arc path
Problem with using physics is I can't scale the speed of the attack.
Gravity's acceleration is fixed and the x speed is pretty much going to be
constant.  With a parabolic path (or similar) I can adjust the velocity and/or
acceleration from the battle manager.
** TODO Add some wiggle to the slime normal attack so the text frargments don't appear all in line
** TODO change skill -> attack spawning to take an id argument     :refactor:
Currently, text fragments contain code for the position function or some 
physics declarations and an initial impulse etc.  Instead, move those 
definitions behind some module or class structure and address them via
an id (string) that gets passed in as part of the skill.
** TODO Store a few char sheets in javascript and load them by default if no sheet comes from the server
** TODO BUG: if the game stops/scene changes, text fragments aren't destroyed
** TODO BUG: seems that box2d elements are not being deallocated on scene change
Might be the entire entity or just the box2d physics part.
** TODO be consistent with .bind for binding context. :refactor:
   In some places we're using underscore's bind and other we're using native .bind
** TODO Properly animate text fragment when it transitions to various states
Need to make several stories out of this
Animate a successful hit
Animate a successful defense
Animate successful completion
+ player attacks that fail fade away when typed.
  on second thought don't do this because we're transitioning to the different
  style of player attacking (or at least testing it out first)
  * opacity 0 with transition (possibly flicker to off)
  * fragment immediately becomes ineffective (collision off)
+ player gets hit 
any more?

** TODO Edge case: multiple fragments with same starting text typod :bug:
NOTE: this algorithm allows the following edge case:
When multiple fragments are 'active' starting with the same text, e.g.
'fool' and 'foolish'.  If you type 'foox', it will deactivate all the fragments.
** TODO Tweak balance so that text flies at the player more smoothly (from the npc)
** TODO Combos
If we go with the player attack slots idea, combos becomes easy. Combos would 
fit into a specific attack slot and you'd simply type one word and another 
would replace it which if you typed it quickly enough (could have a timer or
meter that empties out) then the combo continues. Typos would break the combo
Some combos (or all) would be broken by getting hit unless you had some 
specific skill(s)
** TODO Adjust game behavior based on stats from player and npc
** TODO Clear all TODO's in code :refactor:
** TODO Create a module that governs the display of the battle.
It needs to handle crafty's zoom level and move things around the scene 
appropriately.  This should probably go in the Camera component.  Currently, 
we want to set a higher zoom level because the 2d sprites we're using are 
small and on any decent display are too tiny and hard to see.  We want to 
scale up the scene but this means we have to move all the entities and the 
offset of the crafty stage.  The camera component should maintain a zoom level 
and be able to translate coordinates in scene space to screen space and vice versa.
This is may also need to handle setup of the viewport depending on device 
screen size and orientation etc.  Scaling the game appropriately.
** TODO Particle system setup
** TODO Cinematics
   Cinematics as a concept I'd like to be able to do outside of crafty.  Or with 
   some other type of scripting system.
* Icebox
** TODO Reinstate system where typos cause reduced effects
*** TODO Typos with skill attacks will do reduced damage
** Skill management
   This implies there is some sort of character progression. For the first 
   iteration of this game, the game progression is purely linear.  If I ever
   expand on this game concept then collecting and curating skills will become
   a thing
** Passive skills
   Don't allow switching stances/modes if a text fragment is active (conditionally)
   Should allow this only if you have the correct passive skill
** Player items
   a set of slots that can be typed anytime
   Tab to toggle to item stance
* Done
** DONE Fix stance icons
   CLOSED: [2017-04-09 Sun 00:32]
*** DONE Make icon appear properly
    CLOSED: [2017-03-21 Tue 15:22]
*** DONE Float the icon above the player entity
    CLOSED: [2017-04-09 Sun 00:32]
*** DONE Figure out what to do with the enemy icon
    CLOSED: [2017-03-21 Tue 15:22]
    Should be fine if it's always on attack mode
** DONE Deploy
   CLOSED: [2017-04-08 Sat 17:46]
   LEFT OFF: Deploy fails.
   Precompilation doesn't seem to be happening correctly.  Need to ensure that 
   rake webpacker:compile happens at the start or before rake assets:precompile
   https://github.com/rails/webpacker/issues/90#issuecomment-279033578
   
   So I've tried a massive yak shaving trail in order to try to fix the deploy
   ultimately, Im trying to upgrade webpacker to the latest.  There seems to be
   some new fixes with dhh's help, I think that might help with the heroku 
   deploys since it's what he's been talking about in some of the more recent
   threads on that topic.

   After upgrading webpacker, everything broke.  The fundamental thing is that
   classes don't seem to let me call member functions from the constructor
   For example:

   class Foo {
     constructor() {
       this._foo(); // doesn't like this
     }

     _foo() { console.log("something"); }
   }
   new Foo(); 

   So something is messing up fundamentally in the javascript parsing?
   I'm looking at babel as the possible culprit

   After trying some things it appears that webpack 2.0+ requires babel 7 or
   better, so I tried installing that.  Unfortunately babel 7 is in beta and 
   the latest build is in alpha. 

   Ok so upgrading those, now it seems things work a little better but still the
   class problem persists.  I'm tracking down what is setting that off by 
   commenting out everything aside from the class declaration then slowly adding
   back imports and such until it breaks.

   So far I've traced the problem to the inclusion of box2dweb...
   I'm going to try taking that out and using the box2dweb that came with 
   CraftyBox2D the crafty component/plugin

   So doing some research, I can't seem to find any documentation on calling a
   method from within a class constructor in javascript other than super.  So
   the above example may actually be invalid javascript.  It looks like I might
   have to go through all the code and remove all function calls from inside
   constructors

   Well, after going down this path, it seems that this is not the problem.  
   Other things are completely broken.  Once I moved all function calls out of
   the constructor, after initializing an instance of the class then calling
   a method on it, it can't be found.  Really not sure what's broken here.
   Probably going to just go back to a previously working version and start 
   again

   Ok, so I rolled back to an old version and made sure everything was clean and 
   it was still broken.  Argh.. After a lot of tracing the problem I found it 
   lead to box2d.  Seems the version of box2dweb that I ended up with was not 
   the correct version even though it was specified in my package.json.  This 
   one was broken somehow.  I noticed the difference by looking at the code 
   from my other machine.  Argh.... I think I'd like to see why that code made 
   the thing unhappy.

   So first, trace the reason box2d broke things by rolling back to an earlier 
   version and comparing the diffs.  Then let's move forward with the webpacker 
   upgrade again and try to get the game working.  If that works then can try 
   deploy

   So, after having downloaded both box2dweb_2.1.0b and box2dweb_2.1.0a and 
   comparing the differences, I've found that the problem lies with the 
   following code:
   if(!(Object.prototype.defineProperty instanceof Function)
      && Object.prototype.__defineGetter__ instanceof Function
      && Object.prototype.__defineSetter__ instanceof Function)
   {
      Object.defineProperty = function(obj, p, cfg) {
         if(cfg.get instanceof Function)
            obj.__defineGetter__(p, cfg.get);
         if(cfg.set instanceof Function)
            obj.__defineSetter__(p, cfg.set);
      }
   }
   which is present in 2.1.0a but not in b.  The issue is not present in b so 
   this has to be the culprit.  Looks like it's defining Object.defineProperty
   and I'm guessing something in Babel doesn't like that.

   Alright, now the deploy is working but the images aren't loading.  This is 
   probably because I just have static strings defining the location of the 
   image assets just plopped into my javascript.  Like 
   bg: "/assets/images/typewar/background/blah.jpg"
   I'll need to link to sprockets assets intelligently using .erb as per the 
   webpacker documentation

   Fixed the image path strings and moved them to an assets/images.js.erb
   definition file. All static assets should be referenced here so they can be
   mapped from rails asset_paths (image_path, audio_path, etc).  Once this is
   done, the deploy should work.  After that, assets can be served from 
   cloudfront and as long as the rails side is working ok, then the javascript
   won't need to change

** DONE Rename this project
   CLOSED: [2017-03-29 Wed 20:12]
** DONE rename Effects.SpawnTextFragLinear to something more generic.
   CLOSED: [2017-03-29 Wed 15:57]
   It can spawn any kind of text fragment projectile given a position function.
   It should instead be called SpawnTextProjectile or something
** DONE Create and handle lose condition
   CLOSED: [2017-03-29 Wed 15:49]
   Just needs to be stubbed for now
** DONE Create and handle win condition
   CLOSED: [2017-03-29 Wed 15:49]
   Same
** DONE Reenable slime skills and tweak balance
   CLOSED: [2017-03-29 Wed 15:24]
   Adjust cooldowns until the battle is sufficiently difficult
   This is also necessitating an adjustment of the way that the text library works
*** DONE Change how text library builds text fragments
    CLOSED: [2017-03-29 Wed 15:24]
    It should look at the need for a minimum fragment size, grabbing a word at 
    random.  It should keep adding words until the size is greater than the 
    minimum
** DONE Reenable sound
   CLOSED: [2017-03-25 Sat 20:52]
   Right now we only have the typewriter sound for when a letter is typed

   Looks like we need a better way to declare assets first.  There should be a
   single point of input to declare what all the assets are and where to find 
   them.  Including sprites, sounds, backgrounds, etc.  All the things necessary
   to load up a stage
** DONE Present scene data as an object/json
   CLOSED: [2017-03-25 Sat 19:44]
   Battle scene gets initialized with this data and prepares the scene.
*** DONE Refactor scene initialization using scene data
    CLOSED: [2017-03-25 Sat 19:37]
** DONE When text fragments hit the left border, remove them
   CLOSED: [2017-03-22 Wed 16:21]
** DONE Pull vocabulary from server
   CLOSED: [2017-03-22 Wed 03:02]
*** DONE refactor some of the character initialization up into BattleEntityBase
    CLOSED: [2017-03-22 Wed 03:02]
    Between BattleEntityNPC and BattleEntityPC, there's a lot of dupe code
** DONE text fragment typed gets state machine error                    :bug:
   CLOSED: [2017-03-21 Tue 16:58]
   Seemed to happen when on offense.
   Seems pretty rare, tough to reproduce.
   Seems to happen when a skill is recharging and it's letter gets typed.
   I think the fix could be: ensure input system doesn't send letters to ineligible fragments
Uncaught event activate inappropriate in current state processed
fsm.error @ state-machine.js:85
(anonymous) @ state-machine.js:157
activate @ TextFragment.js:41
(anonymous) @ input_system.js:108
processInput @ input_system.js:107
(anonymous) @ input_system.js:30
inputSystem @ input_system.js:23
runSystems @ proto_battle_scene.js:284
trigger @ crafty.js:5718
step @ crafty.js:5521
tick @ crafty.js:5406
** DONE Move player skill definition/initialization to the skill system :refactor:
   CLOSED: [2017-03-21 Tue 16:47]
   Skills should be placed into the character sheet and the skill system should
   just call on the player to initialize it's skills which then pulls the skills
   off of the char sheet the same way that it does for the slime npc
** DONE Animation overhaul
   CLOSED: [2017-03-21 Tue 16:18]
   Right now, the Effects.TriggerAnimation takes a target and an animation reel 
   name but what if the target doesn't have such an animation reel?
   The system needs to be more general, where characters can respond to 
   animation triggers more generically for moves like "hit" and "dodge" etc
** DONE Fix health bar display
   CLOSED: [2017-03-21 Tue 15:21]
*** DONE make stance change cause status display to be dirty
    CLOSED: [2017-03-21 Tue 15:21]
*** DONE remove UpdateStatus event triggering and binding
    CLOSED: [2017-03-21 Tue 15:21]
** DONE Game manager needs to go away:refactor:
   CLOSED: [2017-03-20 Mon 17:31]
   maybe scene manager is ok, but it needs a healthy looking into..
** DONE Enemy slime second attack type using physics
   CLOSED: [2017-03-20 Mon 17:22]
*** DONE Setup box2d
    CLOSED: [2017-03-18 Sat 01:56]
*** DONE BattleNPCProjectile needs refactoring                     :refactor:
    CLOSED: [2017-03-18 Sat 18:51]
    It needs to be split into 2 systems:
    1 for handling movement of a projectile
    1 for handling collision
*** DONE Add the other skill to slimer
    CLOSED: [2017-03-18 Sat 19:19]
*** DONE Glob skill spawns a projectile with box2d component
    CLOSED: [2017-03-18 Sat 19:20]
*** DONE Glob skill gets appropriate intial velocity/force
    CLOSED: [2017-03-20 Mon 16:41]
*** DONE Floor of the battleground gets rigid body physics as well
    CLOSED: [2017-03-20 Mon 17:21]
*** DONE If glob hits the floor, it dissolves/dissipates
    CLOSED: [2017-03-20 Mon 17:22]
** DONE Ensure you cannot type skills while in a defensive stance
   CLOSED: [2017-03-15 Wed 22:28]
   This is due ot the way text fragment entities are queried out.  
   It should be fixed once text fragment attacks get another component
** DONE Skill properties should move to the appropriate effect     :refactor:
   CLOSED: [2017-03-15 Wed 22:27]
   i.e. a skill has properties, but this should move to be an argument to the damage effect
** DONE Architecture overhaul                                      :refactor:
   CLOSED: [2017-03-15 Wed 22:24]
   Let's use entity component system from the overwatch talk
   Also pull all game state data into an immutable data store
   ok it doesn't have to be immutable, but it probably should be
   All the systems are registered with the scene
   every frame, the engine loops over every system and runs it's function
   each system loops over relavent component tuples and processes them
   any state updates will be pushed into a pending updates queue
   at the end of the frame, the updates will all be applied to the
   data store.

   All component data gets moved off to the global game state
   Components just maintain pointers to their relavent data within
   the state store.

   How to reconcile when multiple systems alter the same info?
   e.g. you move forward but are hit by a projectile which moves you
   back at the same time? I guess they could just both be applied
   maybe you move +5 in the x axis and -2 so the net move is +3
   
   What about if your status changes twice?
   Lets say you were poisoned, then you cured the poison but at the
   same frame you were poisoned again?  The order these are applied
   matter a lot. I think there will need to be an apply update function
   or utilty which will govern the actual update.  Maybe I'm overthinking
   this and I can just apply them in arbitrary order and any collisions
   that do occur will be so infrequent that it won't matter in the
   context of this game
*** DONE Input system
    CLOSED: [2017-03-15 Wed 22:24]
**** DONE Test against Skills
     CLOSED: [2017-03-06 Mon 18:27]
**** DONE Test against Text fragment attacks
     CLOSED: [2017-03-15 Wed 22:24]
*** DONE Skill system
    CLOSED: [2017-03-06 Mon 18:27]
    Need to change the way the skill manager handles text fragments and how it
    accepts input.  It must be compatible with the way the input system 
    fulfills text fragments.
    Input system simply takes input (off of the input queue) and completes text
    fragments.  What happens when those text fragments get completed should be
    up to other systems. So in the case of skills here, how does a skill 
    activate based on a text fragment being completed?

    Previously, BattleSkill had posession of a text fragment.  Now BattleSkill
    should also be a text fragment

**** DONE Delete the comments I left over from the last commit
     CLOSED: [2017-03-04 Sat 14:39]
**** DONE Skill manager should store a set of skills on init
     CLOSED: [2017-03-06 Mon 18:31]
**** DONE Skill manager generates an entity for each skill
     CLOSED: [2017-03-06 Mon 18:31]
**** DONE Skill entities are also text fragments
     CLOSED: [2017-03-06 Mon 18:31]
**** DONE When skill goes from cooling to ready, then reset the text fragment
     CLOSED: [2017-03-06 Mon 18:31]
*** DONE Enemy attack system
    CLOSED: [2017-03-15 Wed 22:24]
**** DONE Refactor skill system to more specifically refer to player skills
     CLOSED: [2017-03-11 Sat 17:51]
**** DONE Build NPC skill system
     CLOSED: [2017-03-11 Sat 19:33]
**** DONE NPC brain needs a system too
     CLOSED: [2017-03-11 Sat 22:21]
**** DONE NPC brain system triggers it's skills on some sort of random timetable
     CLOSED: [2017-03-11 Sat 22:21]
**** DONE Build NPC skill structure
     CLOSED: [2017-03-11 Sat 22:22]
**** DONE NPC skill effects should execute using the same structure as players
     CLOSED: [2017-03-11 Sat 22:22]
**** DONE First npc skill effect spawns a text fragment attack
     CLOSED: [2017-03-11 Sat 22:22]
**** DONE create text fragment attack component
     CLOSED: [2017-03-15 Wed 22:23]
***** DONE display
      CLOSED: [2017-03-15 Wed 22:23]
      TextFragmentDisplay component and accompanying system
      Behavior should handle the rendering of the text fragment view.  It'll 
      depend on 2D and DOM or Canvas.
***** DONE movement
      CLOSED: [2017-03-15 Wed 22:23]
***** DONE defendable
      CLOSED: [2017-03-15 Wed 22:23]
      DefendableTextFragment component and accompanying system
      Input system will handle the typing of these (just as it handles skill
      fragments)
      The system will look at completed defendable fragments and process them
      appropriately every game loop
***** DONE trigger (what happens when it hits)
      CLOSED: [2017-03-15 Wed 22:23]
***** DONE text fragment is accompanied by some component that marks it as defendable
      CLOSED: [2017-03-12 Sun 01:15]
***** DONE this pair is also accompanied by a component which gives the text fragment some movement and collision behavior
      CLOSED: [2017-03-12 Sun 01:17]
**** DONE Refactor/split input system to handle input for skills and defensible fragments seperately
     CLOSED: [2017-03-15 Wed 22:24]
** DONE Change templating engine
   CLOSED: [2017-03-06 Mon 18:42]
** DONE Get game code refactored over to webpack
   CLOSED: [2017-03-02 Thu 22:56]
*** DONE Reasses basic structure of app
    CLOSED: [2017-02-16 Thu 18:18]
*** DONE Figure out how to organize code using es6 structures
    CLOSED: [2017-02-16 Thu 18:18]
*** DONE Get crafty working
    CLOSED: [2017-02-16 Thu 18:18]
    Maybe crafty can be served from asset pipeline via vendor/assets/javascripts
*** DONE Move over basic functionality (start the game)
    CLOSED: [2017-02-17 Fri 18:44]
*** DONE Display the background
    CLOSED: [2017-02-17 Fri 18:44]
*** DONE Load the engine
    CLOSED: [2017-02-22 Wed 11:44]
**** DONE Load the battle manager
     CLOSED: [2017-02-22 Wed 11:43]
*** DONE Load the player
    CLOSED: [2017-02-23 Thu 16:07]
**** TODO Stub out getFromServer()
     This was certainly a YAGNI design
*** DONE Load the NPC (without any ai or action)
    CLOSED: [2017-02-23 Thu 16:08]
**** DONE Stub out getFromServer()
     CLOSED: [2017-02-23 Thu 16:08]
     This was certainly a YAGNI design
*** DONE Load the input manager
    CLOSED: [2017-03-02 Thu 22:55]
*** DONE Ensure input manager is processing input
    CLOSED: [2017-03-02 Thu 22:55]
*** DONE Load the thing that creates text fragments
    CLOSED: [2017-03-02 Thu 22:55]
*** DONE load keyboard bindings
    CLOSED: [2017-03-02 Thu 22:55]
*** DONE Fire a single text fragment
    CLOSED: [2017-03-02 Thu 22:55]
*** DONE Fix AI to fire text fragments continuously
    CLOSED: [2017-03-02 Thu 22:55]
** DONE Use webpack (via webpacker)
   CLOSED: [2017-02-15 Wed 17:24]
*** DONE Install webpacker
    CLOSED: [2017-02-15 Wed 16:54]
*** DONE Setup until webpack dev server runs
    CLOSED: [2017-02-15 Wed 16:54]
*** DONE Get es6 working
    CLOSED: [2017-02-15 Wed 17:24]
** DONE Upgrade to Rails 5
   CLOSED: [2017-02-15 Wed 16:52]
** DONE Design system to adjust game difficulty based on WPM argument
+ (DONE)Add difficulty scale/multiplier to skill (component)
+ REFACTOR:(DONE) pull position func out of skill attributes and make it a function
+ REFACTOR:(DONE) AttackObject should carry a clone of the skill itself

** DONE Make rake db:dcmps only work on dev
** DONE REFACTOR: change skills into backbone models
+ Create a base skill
  * Base skill is an interface that declares how skills are to be used
  * Most skills consist of only data
  * Skills will override their getters in order to accommodate difficulty adjustments
+ Change existing skills into backbone models that inherit from base
+ Adjust skill manager to initialize skill models correctly

** DONE Setup system to collect typing data when the battle ends
** DONE Play some audio hit on each keypress
** DONE Design sound module
** DONE Deploy typewar
** DONE REFACTOR: Backbone models should live inside of entities/components
The only reason to need a backbone model is to make contact with the server
or to encapsulate some more abstract data/functionality.  I shouldn't mix and
match patterns with some objects being created by Backbone model but there 
being a crafty entity inside of it and some simply being Crafty entities.
Everything should be a crafty entity and if there is some need for a backbone
model it can live inside the entity.
** DONE Text Fragment
** DONE Player Entity
** DONE NPC Entity
** DONE REFACTOR: Fix namespacing of all managers
** DONE BUG: End game doesn't work anymore (need to expose scene transitions again)
** DONE Make NPC (brain) choose from skills to use and give those skills cooldowns
** DONE When battle ends, clear out the skill manager view and it's children
** DONE Add exclamation point
** DONE Adjust skills and monster attacks to obtain appropriately sized strings
** DONE BUG: when 2 skills start with the same text, they don't activate properly
Ensure 2 skills can't have the same exact text
When 2 begin with the same text, ensure they behave properly when typed
** DONE Remove turbolinks
** DONE Text librarian
** DONE On crafty.pause, pause AI and stuff
Pausing crafty fires a Paused event that we can listen to to do the things.
** DONE BUG: Skill with comma as text fragment is broken
Occaisionally a skill gets a single comma for its text fragment text. In this 
case it accepts the first input then breaks. this bug is fixed with some 
caveats
** DONE Display an icon indicating attack/defense mode
If possible, change the player stance as well
Move the fsm for attack/defense etc mode onto the player. Probably it's own 
component. Figure out how to get the battle manager to communicate with this
component so it does the right thing.
** DONE EPIC: Player attacks/skills are a set of skill slots that can be typed anytime
+ Player has a set of slots for skills
+ The slot is filled with some text which varies depending on the player stats
  and on their typing speed.
+ Player taps tab to switch between offense and defense
+ Different classes can have different skills/spells that can have various 
  effects
  * healing
  * area damage
  * damage over time
  * helper/option
+ Enemy hitting the player could break their attack depending on attack type,
  player stats/def/etc, player skills (passive or active)
+ Attack animation plays upon successful fragment typing

** DONE Extract status view into a component that can be added to an entity
** DONE Fix broken javascript from bootstrap
Some librar(y|ies) from bootstrap isn't being included somehow
** DONE Fix status bars
** DONE Update twitter bootstrap to 3.x.x
** DONE Fuck off twitter-bootstrap-rails, I want sass
** DONE BUG: If 2 skills start with the same text, it doesn't work 
** DONE BUG: If a skill is being typed and you tab out, once you tab back in and try typing it again, it's broken
** DONE Move health bars/status to the top of the screen/window
** DONE REFACTOR: extract attack objects out into some class or other better structure
An attack is something that gets 'new'ed up and initialized with some json of
options.  These options can be held server side and contains all the data
necessary to populate the attack including damage amounts/properties, animation
animationd delay (maybe), attack behavior, mana cost etc etc.
These should be called skills actually
** DONE Build text library module/functionality **skill epic**
** DONE Apply css classes to skill manager skills based on state **skill epic**
** DONE Get multiple player skills to appear in skill slots **skill epic**
** DONE Setup/build text library for attack/skill generation **skill epic**
Determine difficulty of a particular string
Input: some block of text
Output: an array of hashes of this format
    [
      {:text => "foo", :length => 3, :difficulty => 1},
      {:text => "$%^", :length => 3, :difficulty => 6}
    ]
This set builds a 'library' of text that we can pick from when choosing text
fragments based on some length and difficulty requirements requirements.
Early implementation: Difficulty calculation based on how hard it is to type
a string quickly and accurately.
Ideal implementation: Difficulty calculation based on how hard it is for 
**you** (the player) to type the string based on your typing habits.
Implementation thoughts ===> 
Assign a difficulty to each character. Home row letters are 1, hard to reach
letters are higher up, capital letters add 1 or 2 depending on how easy it is
to press shift. Numbers are higher, symbols are even higher.
** DONE Attack skill doesn't seem to be triggering properly 
just triggers a random attack animation
** DONE BUG: Switching back to defense mode is broken
Can switch back but doesn't accept input.  Perhaps now is the time to move to
state machine for switching
** DONE BUG: Javascript breaks on scene change
Something going on with entities being removed from the DOM (?)
I suspect it's because we're triggering a Remove event manually, which collides
with crafty which triggers that on component removal.
Ok, turns out I was right, it was the triggering of Remove events.
** DONE REFACTOR: Better organize attack information.
Attack information whether from a text fragment or from a player skill should
be the same object type. Going to try to sketch out what that might look like...
Example attack data:
    AttackObject = {
      properties: {...}, // damage properties
      target: target-ent,
      attacker: attacking-ent,
      status-properties: {...}
    }
** DONE Skill manager component **skill epic**
Player has a skill manager
Skill manager has skills (stored in a skillset)
Skills have text fragments and can accept input
Skills have state machine and go from ready to active to cooldown to ready
** DONE Can switch between offense and defense with tab **skill epic**
** DONE Extract display of text fragments out of text fragment component **skill epic**
** DONE REFACTOR: replace calls to 'deallocate' with calls to remove in comopnents **skill epic**
Move deallocate code in components to remove
** DONE Upgrade crafty **skill epic**
Version of crafty we're using now doesn't call remove() on components when
it's entity is destroyed which we need for the following refactor
** DONE REFACTOR: challenge (bloggable) break TextFragment component up into it's base "components" **skill epic**
Currently text fragment has some functionality related to holding attack data
and motion governance. My plan was to pull these out into separate components.
The problem, however, is that both of these components will need to have 
cleanup methods for when the entity is removed/destroyed. But what happens when
two components both have a method named 'cleanup' or 'deallocate' or whatever?
There will be a collision and one will be overwritten.

After some more research, it looks like crafty's .destroy() method (on entity)
will unbind all the things so the first action item is to remove most of my
calls to 'deallocate' and replace them with destroy. Also try to use
entity.bind('EventName', callback) rather than Crafty.bind and see if there's
a difference when deallocating/destroying.

The second action item is to find a solution to the deallocate collision 
problem. I have some possible solutions in mind:

1. Namespace all deallocate methods by the component name itself, for example
textFragmentDeallocate and textFragmentMovementDeallocate. Then some master
component for that entity (specifically) can call the requisite deallocates
2. Set up a deallocator component which registers bindings or more 
specifically, callbacks to run on deallocation.
3. Set up event bindings that listen for entity destruction, calling the 
cleanup callback when that is triggered. The callback can be anonymous, thus
avoiding the naming collision
4. The actual solution: Crafty components can define a remove method that
will be called when the compoenent is removed or the entity is being destroyed.

** DONE Add a tiny bit of delay between monster animation and spawning of fragment
** DONE Wire up attack animations to the animation specified in the attack object
For slime npc, there is an animation attribute in each attack, this should pass
through to the character on attack and degrade gracefully to randomize attack if
none provided
** DONE Characters have max hp
Health bar is rendered as a percentage of max hp
** DONE REFACTOR: pull out common battle entity behavior into a separate component
I think there are a few other components which are overloaded with 
functionality and should be broken up. As part of this, do an audit and create
additional tasks as necessary.
** DONE REFACTOR: Consider initializing box2d as part of Crafty's init 
not part of the scene init
** DONE REFACTOR: extract text fragment from attack entity
Occurs to me that a text fragment can be separated from the piece that actually
flies accross the stage
** DONE REFACTOR: Remove all convenience methods from NPC entity backbone model
Calls should only be made on the actual crafty entity
** DONE BUG: slime sprite is off
** DONE REFACTOR: ensure all events triggered are CapitalCased
** DONE Generate a new smaller vocabulary for monsters
Temporary, since we want to test faster paced action
** DONE Capture single quotes
** DONE BUG: Ran into an issue while playing where key input was no longer registering
Seems to be while typing a fragment that sinks through the ground
Fixed: problem was there was no border along the floor of the stage
** DONE Make enemy npc play animation upon their attack
Player animation behavior doesn't change
** DONE Add an npc attack that arcs
Looks like adding box2d might not be the way to go, it doesn't allow for 
variable speeds. I'm sure I can find some uses for it.
Design a way to pass optional arguments to positionFunc
Add randomization so the enemy npc fires attacks of either type
Fix the force used on the arcing fragment to reach the player
Add some randomization to the force so it misses some percent of the time
** DONE Make player hit animations play instantly (no delay)
** DONE BUG: when 2 fragments begin with the same text and one wins
This is probably an acceptable bug for now... just need to capture it
This is probably an acceptable bug for now... just need to capture it
It appears to skip a character.  For example:
abcdef
abcdff
abcdff
if you type abcd, all 3 fragments should activate.  As soon as you type f, the
first fragment should deactivate (go back to 'live') and the 2 final ones 
should have abcdf as completed, but instead will only have abcd still complete.
Thought: could this be solved the same as the previous problem, by duping one
of the arrays?
** DONE EPIC: Typewar battle evolution
The (battle) scene initializes the battle manager.
The battle manager keeps track of the two sides of battle (typically the player
and opponents). The battle manager has the attack manager module which 
determines how to generate text fragments based on difficulty level, stat
differences between the players, etc etc.
It's also eventually going to keep track of any environmental effects during
battle.

+ (DONE)player/npc.initiateAttackOn should call the battle manager
  Battle manager then generates options for the text fragment spawner
+ (DONE)player is assigned a number of attacks (the AI will have to know about
  these)
+ (DONE)player generates attack object from stored attacks.
  * (DONE)stored attack contains:
  * (DONE)position func
  * (DONE)classes func
  * (DONE)hitbox over time (just constant for now)
+ (DONE)attack object is used to build initial fragment property list
  * (DONE)player attributes + attack profile = initial fragment prop list
+ (DONE)Fragment is created with a property list
+ (DONE)Fragment's behavior is governed by that property list
  * (DONE)damage object
  * (DONE)text
  * (DONE)position over time
  * (DONE)classes(css) over time
  * (DONE)hitbox size over time (shape we don't care for now)
+ (DONE)TextFragmentCompleted event should trigger with the text fragment itself as
  an option/argument. More specifically, it's attack object
+ (DONE)characters have hitboxes
+ (DONE)Fragment damage is resolved when the fragment's hitbox intersects with the
  defender's
+ (DONE)enemy attacks damage reduced based on correctness of typing.
  * What I mean is, If a text fragment is partially typed at the time of impact
    it should affect the damage dealt/taken.  I believe this already works but
    must be tested
+ (DONE)enemy attacks that reach the player do damage
+ (DONE)fragments that leave the play field are destroyed
** DONE Decrase the time between on/off within the flicker
** DONE BUG: when player dies, it doesn't do the game over screen
** DONE BUG: player text appears too high on the screen sometimes
** DONE BUG: when 2 fragments starting with the same text are typed, when one wins
For example:
    South Dakota
    South Carolina
Once you type 'South ' now you press D, South Carolina deactivates but it won't
register the D press for south dakota.
This feature just seems to be broken.
My ramblings investigating this issue: 
I've turned off player and npc battle ai so I can manually send text
fragments through the console.  Using initiateAttackOn() from each of them
I'll send abcdefg from player and abcdfff from monster.
I should be able to type a and have both activate but it isn't doing it.

Upon further investigation, it looks like what's happening is the first
live fragment gets processed (activate). then the event gets triggered
TextFragmentActivated which in this manager moves it out of the live array
and into active.  This happens before the second fragment can be processed
and we're done ?? wait no.. that doesn't sound right.  it should still run
over the _ .each loop......
more digging needed

Upon further investigation, what I theorize is happening is that _ .each
is (may be) doing a traditional for loop, looping over the array until
the itor is >= array length.  The shuffling of the arrays pushes one
item out of the live array into the active array so now the length is
equal to the itor and the loop bails out. I'll need to verify because the
implementation sets a variable length = obj.length so i'm thinking it 
shouldn't keep checking object length but instead cache that value

Final investigation, after digging into underscore, it looks like _ .each
uses native [].forEach if available.  [].forEach will not visit each item
in the array if the array is modified during execution.
** DONE Fix the issue with the text fragment width
The width should probably be set to the length of the string or something
Might need some javascript to set the width of the text fragment wrapper
** DONE Create a battle over scene for the winner
Create a scene manager that handles loading different scenes
The scene manager lives inside the core engine which handles the logistics of
setting up and breaking down the various game modes
** DONE Use a different attack animation from slime (something more visible)
** DONE Hook up the player character to retrieve data from the server including a vocabulary
** DONE Don't show incorrect characters, just flash red or something.
** DONE BUG: Prevent spacebar from scrolling down.
I want to bundle up all the browser keyboard control overrides.  Do this in the
same place that I handle backspace override.
** DONE BUG: Disregard returns
** DONE Distinguish somehow the difference between player cast text fragments and npc sent ones (appearance)..
** DONE BUG: when multiple fragments are 'active' deactivate any that get a wrong input
** DONE Improve the way text fragments display, make them show spaces properly
** DONE BUG: backspace triggers back in the browser
** DONE Handle dashes
** DONE BUG: player/enemy health switches places. Whoever takes more damage appears on the right
** DONE The player should be able to activate any text fragment by typing.
Need a text input manager that watches for keyboard inputs and selects the
correct active fragments.
  + Handle the case where multiple fragments start with the same word.
    - I think we'll want to defer this and allow different skills to handle
    this situation in various ways.
  + Need to clean up fragments when dead (at least put them in the graveyard)
  + Ensure the proper arrays get the right fragments placed in them
** DONE BUG: Enemy name doesn't display
** DONE BUG: when a fragment that you're currently typing goes off screen, it never releases the keyboard focus (need to unbind)
On further investigation, my guess was correct: A text fragment had exited the 
battle area but was not deallocated.  Next experiment, we want to see if a 
text fragment is correctly being destroyed when it leaves the battle arena.
Will need to check Typewar.Engine.battlemanager.getAllLiveFragments() and 
ensure it's size is always equal to the number of fragments we see on screen.

I think I see the problem now.  When a text fragment goes live (enters the 
live queue), it does not get destroyed when it goes off the screen edge.  Now
let's trace why this might be.

I believe this bug is fixed but will need to keep an eye out for it because I
cannot verify this.
** DONE BUG: there is a bug where the input manager stops accepting inputs.
Seems to be fixed thanks to the above, but need to keep an eye out for it.
** DONE Switch to postgres to prepare for heroku deploy
** DONE Handle capital letters
** DONE Change player sprite (current one is crap)
** DONE Removing text fragments from the scene once they hit the edge.  
Stuck on moving the fragment into the 'graveyard' on the battle manager.  
Can't seem to find the fragment that comes back from the event.  However, 
I suspect that the fragment has already been dealt with.. no wait it's 
not in the graveyard either...  Well, maybe it's still being moved and 
so the event is getting triggered many times.  Need to check to ensure 
that the fragment is being deactivated properly.  In fact, perhaps it's
being more than deactivated, it's being finished, or destroyed 
or demolished. It should call deactivate, but also should remove the view,
remove the 2D component, remove bindings, stop calculation of position.
** DONE Move completed text fragments to the graveyard as well.
** DONE Remove the 'type me' instruction text from text fragment partials (or make
them less obtrusive)
** DONE Add a background.
** DONE Allow a method of stopping the AI. It would be nice if we could listen for
the Crafty.pause() call and stop and start automatically.
** DONE Move the AI to the slime. Extract it out so it's a module I can attach to
any monster, even swiching out. Perhaps the monster could have several
behaviors that can be toggled. AI has many behaviors.
For now, just set the behavior to attack at a constant rate
** DONE Zoom in on the characters, camera is too far out.
** DONE Player attacking the monster sends text fragment from the player to the enemy
** DONE Set up simple AI that manages battle flow
** DONE Show health status for enemy.
** DONE Add defend animation and insert appropriately
** DONE REFACTOR: The player should be triggering attacks on the monster(s).
Refactor the way attacking and defending works. The text fragments should be
labeled with attacker and defender and they should resolve separately and
instructions should be sent to each party.
There should be a battlecomputer component or module that takes the attacker,
the defender, and a completed text fragment and does whatever magical math
and our logic to figure out what happened in that round.
With this, we can probably ditch the dual spawners on the enemy npc.
** DONE Make player attack do damage to enemy
** DONE Attacker and defender should be linked to on each text fragment
** DONE Text fragments should answer to TextFragment#success() that reports a percent
of how quickly you typed it.
** DONE Add second stream of text fragments from enemy (spawner). 
Player shouldn't swing sword on successful defense. Only attack
Make sure behavior functions correctly on both parties for attack and def.
** DONE Add second stream of text fragments from enemy (spawner). 
Enemy should have two spawners: attack and defense.
Modify text fragment spawner to be able to pass in options when generating 
a text fragment. Make text fragments able to accept arguments which affect 
the way they behave and are displayed.
** DONE Give the active text fragment z-index > all others
** DONE Add a sprite for the enemy.
Add animation for enemy sprite when hit.
Add animation for when they attack
** DONE Add hit points to enemy
** DONE Move the enemy (in the scene) to the right a bit.
** DONE Keep track of the current (active) fragment.  Maybe there should be an
active pointer/instance var.
** DONE When a spawner generates a new fragment, ensure that it doesn't get
activated if another fragment is already active
** DONE When a fragment is completed, if there is another live fragment, activate
the next one in the array.
** DONE Finish the first draft of the text fragment component
